Q1. Create a function which will take a list as an argument and return the product of all the numbers
after creating a flat list.
Use the below-given list as an argument for your function.
list1 = [1,2,3,4, [44,55,66, True], False, (34,56,78,89,34), {1,2,3,3,2,1}, {1:34, "key2": [55, 67, 78, 89], 4: (45,
22, 61, 34)}, [56, 'data science'], 'Machine Learning']
Note: you must extract numeric keys and values of the dictionary also.

Ans:- def product_of_numbers(lst):
    flat_lst = []
    for item in lst:
        if isinstance(item, (int, float)):
            flat_lst.append(item)
        elif isinstance(item, list):
            flat_lst.extend([i for i in item if isinstance(i, (int, float))])
        elif isinstance(item, tuple):
            flat_lst.extend([i for i in item if isinstance(i, (int, float))])
        elif isinstance(item, dict):
            for key, value in item.items():
                if isinstance(key, (int, float)):
                    flat_lst.append(key)
                if isinstance(value, (int, float)):
                    flat_lst.append(value)
        else:
            continue
    product = 1
    for num in flat_lst:
        product *= num
    return product
list1 = [1,2,3,4, [44,55,66, True], False, (34,56,78,89,34), {1,2,3,3,2,1}, {1:34, "key2": [55, 67, 78, 89], 4: (45, 22, 61, 34)}, [56, 'data science'], 'Machine Learning']

print(product_of_numbers(list1))

Q2. Write a python program for encrypting a message sent to you by your friend. The logic of encryption
should be such that, for a the output should be z. For b, the output should be y. For c, the output should
be x respectively. Also, the whitespace should be replaced with a dollar sign. Keep the punctuation
marks unchanged.
Input Sentence: I want to become a Data Scientist.
Encrypt the above input sentence using the program you just created.

Ans:- def encrypt_message(message):
    encrypted_message = ""
    for char in message:
        if char.isalpha():
            # convert letters to their corresponding opposite letters
            opposite_char = chr(ord('a') + ord('z') - ord(char.lower()))
            if char.isupper():
                opposite_char = opposite_char.upper()
            encrypted_message += opposite_char
        elif char == ' ':
            # replace spaces with $
            encrypted_message += '$'
        else:
            # keep punctuation marks unchanged
            encrypted_message += char
    return encrypted_message
input_sentence = "I want to become a Data Scientist."
encrypted_sentence = encrypt_message(input_sentence)
print("Encrypted sentence:", encrypted_sentence)
